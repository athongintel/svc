#ifndef EC_CURVE_H
#define EC_CURVE_H

	#include "ECPoint.h"
	#include <cstring>
	#include <cstdio>
	
	#define w256_001_p "8884933102832021670310856601112383279507496491807071433260928721853918699951"
	#define w256_001_n "8884933102832021670310856601112383279454437918059397120004264665392731659049"
	#define w256_001_a4 "2481513316835306518496091950488867366805208929993787063131352719741796616329"
	#define w256_001_a6 "4387305958586347890529260320831286139799795892409507048422786783411496715073"
	#define w256_001_r4 "5473953786136330929505372885864126123958065998198197694258492204115618878079"
	#define w256_001_r6 "5831273952509092555776116225688691072512584265972424782073602066621365105518"
	#define w256_001_gx "7638166354848741333090176068286311479365713946232310129943505521094105356372"
	#define w256_001_gy "762687367051975977761089912701686274060655281117983501949286086861823169994"
	#define w256_001_r "8094458595770206542003150089514239385761983350496862878239630488323200271273"

	class ECCurve{
		public:
			mpz_t p;
			mpz_t a4;
			mpz_t a6;
			mpz_t n;
			ECPoint* g;
			
			//constructors
			ECCurve();

			//operations
			ECPoint* add(const ECPoint* P, const ECPoint* Q);
			ECPoint* mul(const ECPoint* P, const mpz_t* k);
			ECPoint* dbl(const ECPoint* P);
			ECPoint* opposite(const ECPoint* P);
			bool contains(const ECPoint* P);
			int getRequestSecurityLength();
			~ECCurve();

	};

#endif // EC_CURVE_H
